require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe PicturesController, type: :controller do

  before(:all) do
    @user=FactoryGirl.create :user
    @user.collections.create FactoryGirl.attributes_for :collection
  end

  # let(:valid_attributes) {
  #   {
  #       collection_id: @user.collections[0].id,
  #       image: Rack::Test::UploadedFile.new(Rails.root.join("spec", "support", "test_image.jpg"),'image/jpg')
  #       # image: fixture_file_upload('/files/test_image.jpg')
  #   }
  # }

  let(:valid_attributes) {
    @user.collections[0].pictures.build(FactoryGirl.attributes_for :picture).attributes
  }

  let(:invalid_attributes) {
    {image: nil}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PicturesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'user login' do
    before(:each) do
      sign_in @user
    end

    describe "GET #new" do
      it "assigns a new picture as @picture" do
        get :new, {collection_id: @user.collections[0]}, valid_session
        expect(assigns(:picture)).to be_a_new(Picture)
      end
    end

    describe "GET #edit" do
      it "assigns the requested picture as @picture" do
        picture = Picture.create! valid_attributes
        get :edit, {:id => picture.to_param}, valid_session
        expect(assigns(:picture)).to eq(picture)
      end
    end

    describe "POST #create" do
      context "with valid params" do
        it "creates a new Picture" do
          expect {
            post :create, :picture => valid_attributes
          }.to change(Picture, :count).by(1)
        end

        it "assigns a newly created picture as @picture" do
          post :create, {:picture => valid_attributes}, valid_session
          expect(assigns(:picture)).to be_a(Picture)
          expect(assigns(:picture)).to be_persisted
        end

        it "redirects to the created picture" do
          post :create, {:picture => valid_attributes}, valid_session
          expect(response).to redirect_to @user.collections[0]
        end
      end

      # context "with invalid params" do
      #   it "assigns a newly created but unsaved picture as @picture" do
      #     post :create, {:picture => invalid_attributes}, valid_session
      #     expect(assigns(:picture)).to be_a_new(Picture)
      #   end
      #
      #   it "re-renders the 'new' template" do
      #     post :create, {:picture => invalid_attributes}, valid_session
      #     expect(response).to render_template("new")
      #   end
      # end
    end

    describe "PUT #update" do
      context "with valid params" do
        let(:new_attributes) {
          skip("Add a hash of attributes valid for your model")
        }

        it "updates the requested picture" do
          picture = Picture.create! valid_attributes
          put :update, {:id => picture.to_param, :picture => new_attributes}, valid_session
          picture.reload
          skip("Add assertions for updated state")
        end

        it "assigns the requested picture as @picture" do
          picture = Picture.create! valid_attributes
          put :update, {:id => picture.to_param, :picture => valid_attributes}, valid_session
          expect(assigns(:picture)).to eq(picture)
        end

        it "redirects to the picture" do
          picture = Picture.create! valid_attributes
          put :update, {:id => picture.to_param, :picture => valid_attributes}, valid_session
          expect(response).to redirect_to(picture)
        end
      end

      context "with invalid params" do
        it "assigns the picture as @picture" do
          picture = Picture.create! valid_attributes
          put :update, {:id => picture.to_param, :picture => invalid_attributes}, valid_session
          expect(assigns(:picture)).to eq(picture)
        end

        it "re-renders the 'edit' template" do
          picture = Picture.create! valid_attributes
          put :update, {:id => picture.to_param, :picture => invalid_attributes}, valid_session
          expect(response).to render_template("edit")
        end
      end
    end

    describe "DELETE #destroy" do
      it "destroys the requested picture" do
        picture = Picture.create! valid_attributes
        expect {
          delete :destroy, {:id => picture.to_param}, valid_session
        }.to change(Picture, :count).by(-1)
      end

      it "redirects to the pictures list" do
        picture = Picture.create! valid_attributes
        delete :destroy, {:id => picture.to_param}, valid_session
        expect(response).to redirect_to(pictures_url)
      end
    end
  end

end
