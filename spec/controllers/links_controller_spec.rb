require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe LinksController, type: :controller do

  before(:all) do
    @user=FactoryGirl.create :user
    @user.collections.create FactoryGirl.attributes_for :collection
  end

  # This should return the minimal set of attributes required to create a valid
  # Link. As you add validations to Link, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    FactoryGirl.attributes_for :link
  }

  let(:invalid_attributes) {
    @user.collections[0].links.build(FactoryGirl.attributes_for :invalid_link).attributes
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # LinksController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'user login' do
    before(:each) do
      sign_in @user
    end

    describe "GET #new" do
      it "assigns a new link as @link" do
        get :new, {collection_id: @user.collections[0]}, valid_session
        expect(assigns(:link)).to be_a_new(Link)
      end
    end

    describe "GET #edit" do
      it "assigns the requested link as @link" do
        link = Link.create! valid_attributes
        get :edit, {:id => link.to_param}, valid_session
        expect(assigns(:link)).to eq(link)
      end
    end

    describe "POST #create" do
      context "with valid params" do
        it "creates a new Link" do
          expect {
            post :create, {collection_id: @user.collections.first.id, :link => valid_attributes}, valid_session
          }.to change(Link, :count).by(1)
        end

        it "assigns a newly created link as @link" do
          post :create, {collection_id: @user.collections.first.id, :link => valid_attributes}, valid_session
          expect(assigns(:link)).to be_a(Link)
          expect(assigns(:link)).to be_persisted
        end

        it "redirects to the user.collection" do
          post :create, {collection_id: @user.collections.first.id, :link => valid_attributes}, valid_session
          expect(response).to redirect_to(@user.collections[0])
        end
      end

      context "with invalid params" do
        it "assigns a newly created but unsaved link as @link" do
          post :create, {collection_id: @user.collections.first.id, :link => invalid_attributes}, valid_session
          expect(assigns(:link)).to be_a_new(Link)
        end

        it "re-renders the 'new' template" do
          post :create, {collection_id: @user.collections.first.id, :link => invalid_attributes}, valid_session
          expect(response).to render_template("new")
        end
      end
    end

    describe "PUT #update" do
      context "with valid params" do
        let(:new_attributes) {
          FactoryGirl.attributes_for :link
        }

        it "updates the requested link" do
          link = Link.create! valid_attributes.merge(collection_id: @user.collections.first.id)
          put :update, {:id => link.id, :link => new_attributes}, valid_session
          link.reload
          expect(link.text).to eq new_attributes[:text]
        end

        it "assigns the requested link as @link" do
          link = Link.create! valid_attributes.merge(collection_id: @user.collections.first.id)
          put :update, {:id => link.to_param, :link => valid_attributes}, valid_session
          expect(assigns(:link)).to eq(link)
        end

        it "redirects to the user.collection" do
          link = Link.create! valid_attributes.merge(collection_id: @user.collections.first.id)
          put :update, {:id => link.to_param, :link => valid_attributes}, valid_session
          expect(response).to redirect_to(@user.collections[0])
        end
      end

      context "with invalid params" do
        it "assigns the link as @link" do
          link = Link.create! valid_attributes.merge(collection_id: @user.collections.first.id)
          put :update, {:id => link.to_param, :link => invalid_attributes}, valid_session
          expect(assigns(:link)).to eq(link)
        end

        it "re-renders the 'edit' template" do
          link = Link.create! valid_attributes.merge(collection_id: @user.collections.first.id)
          put :update, {:id => link.to_param, :link => invalid_attributes}, valid_session
          expect(response).to render_template("edit")
        end
      end
    end

    describe "DELETE #destroy" do
      it "destroys the requested link" do
        link = Link.create! valid_attributes.merge(collection_id: @user.collections.first.id)
        expect {
          delete :destroy, {:id => link.to_param}, valid_session
        }.to change(Link, :count).by(-1)
      end

      it "redirects to the user.collection" do
        link = Link.create! valid_attributes.merge(collection_id: @user.collections.first.id)
        delete :destroy, {:id => link.to_param}, valid_session
        expect(response).to redirect_to(@user.collections[0])
      end
    end
  end

  describe 'guest access' do

    describe "GET #new" do
      it "assigns a new link as nil" do
        get :new, {collection_id: @user.collections[0]}, valid_session
        expect(assigns(:link)).to eq nil
      end
    end

    describe "GET #edit" do
      it "redirect to new_user_session_path" do
        link = Link.create! valid_attributes
        get :edit, {:id => link.to_param}, valid_session
        expect(response).to redirect_to new_user_session_path
      end
    end

    describe "POST #create" do
      it "redirects to new_user_session_path" do
        post :create, {collection_id: @user.collections.first.id, :link => valid_attributes}, valid_session
        expect(response).to redirect_to new_user_session_path
      end
    end

    describe "PUT #update" do
      it "redirects to new_user_session_path" do
        link = Link.create! valid_attributes
        put :update, {:id => link.to_param, :link => valid_attributes}, valid_session
        expect(response).to redirect_to(new_user_session_path)
      end
    end

    describe "DELETE #destroy" do
      it "redirects to new_user_session_path" do
        link = Link.create! valid_attributes
        delete :destroy, {:id => link.to_param}, valid_session
        expect(response).to redirect_to(new_user_session_path)
      end
    end
  end

end
